package org.psliwa.idea.composerJson.ui;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class ChooserDialog<T> extends DialogWrapper {

    private final T[] objects;
    private JPanel chooserPanel;
    private JPanel contentPanel;
    private JLabel titleLabel;
    private final JCheckBox[] checkBoxes;

    public ChooserDialog(@NotNull Project project, @NotNull String title, @NotNull T[] objects) {
        this(project, title, objects, new ToStringPresentation<T>());
    }

    public ChooserDialog(@NotNull Project project, @NotNull String title, @NotNull T[] objects, @NotNull Presentation<T> presentation) {
        super(project);

        this.objects = objects;

        checkBoxes = new JCheckBox[objects.length];
        chooserPanel.setLayout(new GridLayoutManager(objects.length, 1));

        for (int i = 0; i < objects.length; i++) {
            JCheckBox checkBox = new JCheckBox(presentation.getPresentation(objects[i]), true);

            checkBoxes[i] = checkBox;
            GridConstraints constraints = new GridConstraints();
            constraints.setRow(i);
            constraints.setAnchor(GridConstraints.ANCHOR_NORTHWEST);
            chooserPanel.add(checkBox, constraints);
        }

        setTitle(title);
        if (title.isEmpty()) {
            titleLabel.setVisible(false);
        } else {
            titleLabel.setText(title + ":");
        }
        setOKActionEnabled(true);

        init();
        pack();
    }

    public List<T> showAndGetChosen() {
        if (this.showAndGet()) {
            List<T> list = new LinkedList<T>();

            for (int i = 0; i < objects.length; i++) {
                if (checkBoxes[i].isSelected()) {
                    list.add(objects[i]);
                }
            }

            return list;
        } else {
            return Collections.emptyList();
        }
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return contentPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.setMaximumSize(new Dimension(2147483647, 600));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setEnabled(true);
        scrollPane1.setHorizontalScrollBarPolicy(31);
        contentPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        chooserPanel = new JPanel();
        chooserPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(chooserPanel);
        titleLabel = new JLabel();
        titleLabel.setText("");
        contentPanel.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    public interface Presentation<T> {
        String getPresentation(T object);
    }

    private static class ToStringPresentation<T> implements Presentation<T> {
        @Override
        public String getPresentation(T object) {
            return object.toString();
        }
    }
}
